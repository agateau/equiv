apply plugin: 'com.android.application'

android {
    Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(file('../version.properties')))

    compileSdk 33

    defaultConfig {
        applicationId "com.agateau.equiv"
        minSdkVersion 17
        targetSdkVersion 33
        versionCode versionProps['VERSION_CODE'].toInteger()
        versionName versionProps['VERSION']
    }
    signingConfigs {
        release {
            if (project.file('signing.gradle').exists()) {
                apply from: 'signing.gradle', to: release
            } else if (System.getenv("KEYSTORE_BASE64") != null) {
                storeFile decodeKeyStoreFileFromBase64Env('KEYSTORE_BASE64')
                storePassword System.getenv('KEYSTORE_PASSWORD')
                keyAlias System.getenv('KEYSTORE_KEY_ALIAS')
                keyPassword System.getenv('KEYSTORE_KEY_PASSWORD')
            }
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    namespace 'com.agateau.equiv'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    testImplementation 'junit:junit:4.13.2'
    implementation 'junit:junit:4.13.2'
}

// Thanks to https://gist.github.com/mariotaku/7a0c51955d14def2fa0e#file-signing-gradle-L82
static def decodeKeyStoreFileFromBase64Env(String name) {
    String keyStoreBase64 = System.getenv(name)
    if (keyStoreBase64 == null) {
        return null
    }
    File tempKeyStoreFile = File.createTempFile("tmp_ks_", ".jks", File.createTempDir())
    FileOutputStream fos = null
    try {
        fos = new FileOutputStream(tempKeyStoreFile)
        fos.write(keyStoreBase64.decodeBase64())
        fos.flush()
    } finally {
        if (fos != null) {
            fos.close()
        }
    }
    return tempKeyStoreFile
}
